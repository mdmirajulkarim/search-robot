{"version":3,"sources":["components/Card/index.jsx","components/Cardlist/CardList.jsx","components/searchBox/index.jsx","components/index.jsx","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","cardComponent","robots","map","robot","key","SearchBox","searchChange","type","placeholder","onChange","App","state","searchField","onSearchChange","event","setState","target","value","fetch","then","response","json","user","filterRobots","this","filter","toLocaleLowerCase","includes","style","tc","color","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"uNAceA,EAZD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACxB,OACE,yBAAKC,UAAU,uCACX,yBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,yBAAKG,UAAU,MACV,4BAAKF,GACL,2BAAIC,MCeFI,EApBE,SAAC,GAAc,IACzBC,EADwB,EAAZC,OACWC,KAAI,SAAAC,GAC3B,OACC,kBAAC,EAAD,CACAC,IAAKD,EAAMV,GACXA,GAAIU,EAAMV,GACVC,KAAMS,EAAMT,KACZC,MAAOQ,EAAMR,WAKnB,OACE,6BACGK,ICAQK,EAfI,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aACnB,OACE,yBAAKV,UAAU,OACX,2BACAA,UAAU,mCACVW,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCoCHI,EAvCf,4MAEIC,MAAQ,CACJV,OAAO,GACPW,YAAY,IAJpB,EAOIC,eAAe,SAACC,GAEZ,EAAKC,SAAS,CACVH,YAAYE,EAAME,OAAOC,SAVrC,uDAcY,IAAD,OAEPC,MAAM,8CACPC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAI,OAAI,EAAKP,SAAS,CAC7Bd,OAAOqB,OAGJ,IAAMC,EAAeC,KAAKb,MAAMV,OAAOwB,QAAO,SAAAtB,GAC1C,OAAOA,EAAMT,KAAKgC,oBAAoBC,SAAS,EAAKhB,MAAMC,YAAYc,wBAE1E,OAEE,yBAAK9B,UAAU,MACX,wBAAIgC,MAAO,CAACC,GAAG,SAAUC,MAAM,UAA/B,iBACA,kBAAC,EAAD,CAAWxB,aAAckB,KAAKX,iBAC9B,kBAAC,EAAD,CAAUZ,OAAQsB,SA9B5B,GAAyBQ,aCMLC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzB,MAAK,SAAA0B,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.34343dbb.chunk.js","sourcesContent":["import React from 'react'\n\n const Card = ({id, name, email}) => {\n  return (\n    <div className='bg-light-green dib br3 pa3 ma2 grow'>\n        <img alt=\"robot\" src={`https://robohash.org/${id}?200x200`}/>\n        <div className='tc'>\n             <h2>{name}</h2>\n             <p>{email}</p>\n        </div>\n    </div>\n  )\n}\n\nexport default Card","import React from 'react'\nimport Card from '../Card'\n\nconst CardList = ({robots}) => {\n const cardComponent = robots.map(robot => {\n       return (\n        <Card\n        key={robot.id}\n        id={robot.id}\n        name={robot.name}\n        email={robot.email}\n        />\n       ) \n })\n    \n  return (\n    <div>\n      {cardComponent}\n      \n    </div>\n  )\n}\n\nexport default CardList","import React from 'react'\n\n const SearchBox = ({searchChange}) => {\n  return (\n    <div className='pa2'>\n        <input \n        className='pa3 ba b--green bg-lightest-blue'\n        type='search'\n        placeholder='search robots'\n        onChange={searchChange}\n        />\n      \n    </div>\n  )\n\n}\n\nexport default SearchBox","import React, { Component } from 'react'\nimport {robots} from '../data';\nimport CardList from '../components/Cardlist/CardList'\nimport SearchBox from '../components/searchBox/'\n\n\nexport class App extends Component {\n\n    state = {\n        robots:[],\n        searchField:''\n    }\n\n    onSearchChange=(event)=>{\n    \n        this.setState({\n            searchField:event.target.value\n        })\n    }\n \n  render() {\n\n    fetch('https://jsonplaceholder.typicode.com/users')\n  .then(response => response.json())\n  .then(user => this.setState({\n robots:user\n  }))\n\n    const filterRobots = this.state.robots.filter(robot => {\n        return robot.name.toLocaleLowerCase().includes(this.state.searchField.toLocaleLowerCase())\n    })\n    return (\n \n      <div className='tc'>\n          <h1 style={{tc:'center', color:'white'}}>Search Robots</h1>\n          <SearchBox searchChange={this.onSearchChange}/>\n          <CardList robots={filterRobots}/>\n        \n      </div>\n    )\n  }\n}\n\n\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons'\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}